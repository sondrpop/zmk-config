#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_34keys.h"

#define strdy   0
#define qwert   1
#define syml    2
#define symr    3
#define numb    4
#define fn      5
#define sym     6

#define QUICK_TAP_MS 175

// Homerow mods config

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH1 LH0 RH0 RH1                                              // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hrl, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hrr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hll, &mo, &kp, KEYS_R THUMBS)  // left-hand layer tap HRMs
MAKE_HRM(hlr, &mo, &kp, KEYS_L THUMBS)  // right-hand layer tap HRMs

MAKE_HRM(hsl, &mo, &sk, KEYS_R THUMBS)  // left-hand sticky layer tap HRMs
MAKE_HRM(hsr, &mo, &sk, KEYS_L THUMBS)  // right-hand sticky layer tap HRMs

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

#define COMBOS_TERM 50
#define BASE_COMBOS_MACRO(POSITION1, POSITION2, BINDING) \
base_combo_ ## POSITION1 ## _ ## POSITION2 { \
  layers = <0>; \
  key-positions = <POSITION1 POSITION2>; \
  bindings = <BINDING>; \
  timeout-ms = <COMBOS_TERM>; \
};
#define NUMB_COMBOS_MACRO(POSITION1, POSITION2, BINDING) \
numb_combo_ ## POSITION1 ## _ ## POSITION2 { \
  layers = <4>; \
  key-positions = <POSITION1 POSITION2>; \
  bindings = <BINDING>; \
  timeout-ms = <COMBOS_TERM>; \
};

/ {

    macros {
        ZMK_MACRO(macro_arrow,
            bindings = <&kp SPACE &kp EQUAL &kp GT &kp SPACE>;
        )
        ZMK_MACRO(macro_callback,
            bindings = <&kp LPAR &kp LPAR &kp RPAR &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp LBRC>;
        )
    };

    behaviors {
        td_numb_fn: tap_dance_numb {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mo numb>, <&mo fn>;
        };
    };

    combos {
        compatible = "zmk,combos";
        // comments use main layout to more easily indicate combo key locations
        // tab: d,space
        BASE_COMBOS_MACRO(13, 31, &kp TAB)
        // enter: [bspc],n
        BASE_COMBOS_MACRO(16, 32, &kp RET)

        // // --- HOME ROW: LEFT TO RIGHT ---//
        // // left square bracket: s,t
        // BASE_COMBOS_MACRO(10, 11, &kp LBKT)
        // // left curly brace: t,r
        // BASE_COMBOS_MACRO(11, 12, &kp LBRC)
        // // left parenthesis: r,d
        // BASE_COMBOS_MACRO(12, 13, &kp LPAR)
        // // equals: d,
        // BASE_COMBOS_MACRO(13, 14, &kp EQUAL)
        // // colon: repeat,n
        // BASE_COMBOS_MACRO(15, 16, &kp COLON)
        // // right parenthesis: n,a
        // BASE_COMBOS_MACRO(16, 17, &kp RPAR)
        // // right curly brace: t,r
        // BASE_COMBOS_MACRO(17, 18, &kp RBRC)
        // // right square bracket: s,t
        // BASE_COMBOS_MACRO(18, 19, &kp RBKT)

        //---TOP ROW: LEFT TO RIGHT---//
        // escape: v,m
        BASE_COMBOS_MACRO(0, 1, &kp ESC)

        // // undo: m,l
        // BASE_COMBOS_MACRO(1, 2, &kp LG(Z))
        // // copy: l,c
        // BASE_COMBOS_MACRO(2, 3, &kp LG(C))
        // // cut: c,p
        // BASE_COMBOS_MACRO(3, 4, &kp LG(X))

        // (() => { : x,f
        NUMB_COMBOS_MACRO(5, 6, &macro_callback)
        // // paste: f,o
        // BASE_COMBOS_MACRO(6, 7, &kp LG(V))
        // // redo: o,u
        // BASE_COMBOS_MACRO(7, 8, &kp LG(LS(Z)))
        // => : u,j
        NUMB_COMBOS_MACRO(8, 9, &macro_arrow)

        //---TOP ROW: LEFT TO RIGHT---//
        // move to space to left: v + t
        NUMB_COMBOS_MACRO(0, 11, &kp LG(LS(LA(LC(P)))))
        // move to space to right: e + j
        NUMB_COMBOS_MACRO(9, 18, &kp LG(LS(LA(LC(N)))))
        // move window to space to left: z + k
        NUMB_COMBOS_MACRO(20, 21, &kp LG(LS(LC(P))))
        // move window to space to right: sqt + comma
        NUMB_COMBOS_MACRO(28, 29, &kp LG(LS(LC(N))))
        // focus window to left: q + g
        NUMB_COMBOS_MACRO(22, 23, &kp LG(LS(LA(LC(L)))))
        // focus window to right: h + dot
        NUMB_COMBOS_MACRO(26, 27, &kp LG(LS(LA(LC(R)))))
        // swap with window to left: k + q
        NUMB_COMBOS_MACRO(21, 22, &kp LG(LS(LC(L))))
        // swap with window to right: dot + sqt
        NUMB_COMBOS_MACRO(27, 28, &kp LG(LS(LC(R))))
    };

    keymap {
        compatible = "zmk,keymap";

        strdy_layer {
            bindings = <

            &kp V     &kp M        &kp L        &kp C           &kp P                &kp X       &kp F        &kp O        &kp U        &kp J
            &kp S     &hrl LCTRL T &hrl LALT R  &hrl LGUI D     &kp Y                &kp DOT     &hrr RGUI N  &hrr RALT A  &hrr RCTRL E &kp I
            &kp Z     &kp K        &kp Q        &hll symr G     &kp W                &kp B       &hlr syml H  &kp SQT      &kp SEMI     &kp COMMA
                                   &hrl LG(LS(LA(LCTRL))) SPACE &sk LSHFT            &mo numb    &hlr fn BSPC

            >;
        };

        qwert_layer {
            bindings = <

            &kp Q     &kp W        &kp E        &kp R        &kp T                &kp Y       &kp U        &kp I        &kp O        &kp P
            &kp A     &hrl LCTRL S &hrl LALT D  &hrl LGUI F  &kp G                &kp H       &hrr RGUI J  &hrr RALT K  &hrr RCTRL L &kp SEMI
            &kp Z     &kp X        &kp C        &hll symr V  &kp B                &kp N       &kp syml M   &kp SQT      &kp SEMI     &kp COMMA
                                   &hrl LG(LS(LA(LCTRL))) SPACE &sk LSHFT         &mo numb    &hlr fn BSPC

            >;
        }


        syml_layer {
            bindings = <

            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT            &trans     &trans     &trans     &trans     &trans
            &kp TILDE  &kp GRAVE  &kp LBRC   &kp RBRC   &kp SLASH            &trans     &trans     &trans     &trans     &trans
            &kp BSLH   &kp SEMI   &kp LBKT   &kp RBKT   &kp PIPE             &trans     &trans     &trans     &trans     &trans
                                             &trans     &trans               &trans     &trans

            >;
        };



        symr_layer {
            bindings = <

            &trans     &trans     &trans     &trans     &trans               &kp CARET  &kp AMPS   &kp STAR   &kp PLUS   &kp EQUAL
            &trans     &trans     &trans     &trans     &trans               &kp MINUS  &kp LPAR   &kp RPAR   &kp SQT    &kp COLON
            &trans     &trans     &trans     &trans     &trans               &kp UNDER  &kp LT     &kp GT     &kp DQT    &kp QMARK
                                             &trans     &trans               &trans     &trans

            >;
        };



        numb_layer {
            bindings = <

            &trans     &trans           &kp UP          &trans           &trans         &kp STAR   &kp N7        &kp N8        &kp N9         &kp PLUS
            &trans     &hrl LCTRL LEFT  &hrl LALT DOWN  &hrl LGUI RIGHT  &trans         &kp N0     &hrr RGUI N4  &hrr RALT N5  &hrr RCTRL N6  &kp MINUS
            &trans     &trans           &trans          &trans           &trans         &kp SLASH  &kp N1        &kp N2        &kp N3         &kp EQUAL
                                                        &trans           &trans         &trans     &mo fn

            >;
        };


        fn_layer {
            bindings = <

            &to 0       &to 1       &trans     &trans       &trans                       &bt BT_PRV     &kp F7      &kp F8     &kp F9     &kp F10
            &trans      &trans      &trans     &out OUT_USB &trans                       &bt BT_NXT     &kp F4      &kp F5     &kp F6     &kp F11
            &trans      &trans      &trans     &out OUT_BLE &trans                       &bt BT_CLR     &kp F1      &kp F2     &kp F3     &kp F12
                                               &trans       &trans                       &trans         &trans

            >;
        };
    };
};
